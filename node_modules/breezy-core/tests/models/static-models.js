'use strict'

const breezyConfig = require('../../data/config')
require('../../src/util/breezy-config').initConfig(breezyConfig)
const {defaultRoles, ROLE_TYPE} = require('../../data/security-config')
const {securityRequirement, mergePermissions} = require('../../src/security/access-manager')
const util = require('util')

const members = [{
  _id: 'e16af8b6eb68_08cf60071ead',
  company_id: 'COMPANY_ID',
  user_id: 'USER_ID',
  roles: [],
  positions:
    {
      manager:
        ['POSITION_ID']
    }
}, {
  _id: 'e16af8b6eb68_08cf60071ead',
  company_id: 'COMPANY_ID',
  user_id: 'USER_ID',
  roles: [],
  positions:
    {
      position_member:
        ['POSITION_ID']
    }
}, {
  _id: 'e16af8b6eb68_08cf60071ead',
  company_id: 'COMPANY_ID',
  user_id: 'USER_ID',
  roles: [],
  positions:
    {
      position_member:
        ['POSITION_ID'],
      manager:
        ['POSITION_ID']
    }
}, {
  _id: 'e16af8b6eb68_08cf60071ead',
  company_id: 'COMPANY_ID',
  user_id: 'USER_ID',
  roles: []
}]

async function main() {
  //let position = await positionClient.getPositionById('ba7b7b8a9080')

  let userRoles = ['sys_admin','admin', 'member']
  let positions = ['ba7b7b8a9080']

  let models = '\n//*****************STATIC MODELS\n\'use strict\''

  for (let role of userRoles) {
    for (let member of members) {
      member.roles = [role]
      let positionRole = ''
      let count = 0
      for (let key in member.positions) {
        positionRole = '_' + key
        count++
      }
      let model = await getSecurityPermissions(member)

      if (count > 1) {
        positionRole = '_All'
      }

      let staticModel = '\n\nlet ' + role + positionRole + 'Model = ' + util.inspect(model);
      models += staticModel
    }
  }

  models += '\n\nlet sys_admin = {\n  all: sys_admin_AllModel,\n  manager: sys_admin_managerModel,\n  member: sys_admin_position_memberModel,\n  none: sys_adminModel\n}'

  models += '\n\nlet admin = {\n  all: admin_AllModel,\n  manager: admin_managerModel,\n  member: admin_position_memberModel,\n  none: adminModel\n}'

  models += '\n\nlet member = {\n  all:\n  member_AllModel,\n  none: memberModel,\n  member: member_position_memberModel,\n  manager: member_managerModel\n}'

  models += '\n\nmodule.exports = {\n  sys_admin,\n  admin,\n  member\n}\n'

  models += '\n//*****************'

  console.log(models)
}


async function getSecurityPermissions(member) {

  let teams
  let security
  let teamIds = []
  let positionRoles

  if (!member || !member.positions) {
    positionRoles = {}
  } else {
    positionRoles = member.positions
  }

  //merge team and position role assignments
  if (teams) {
    for (let team of teams) {
      teamIds.push(team._id)
      if (team.positions) {
        for (let role in team.positions) {
          for (let positionId of team.positions[role]) {
            if (!(role in positionRoles)) {
              positionRoles[role] = []
            }
            if (positionRoles[role].indexOf(positionId) < 0) {
              positionRoles[role].push(positionId)
            }
          }
        }
      }
    }
  }

  let permissions = {}
  for (let role of defaultRoles) {
    if ((member.roles.indexOf(role._id) >= 0) || (role._id in positionRoles)) {
      for (let permission of role.permissions) {
        if (role.type === ROLE_TYPE.POSITION) {
          if (member.roles.indexOf(role._id) < 0) {
            member.roles.push(role._id)
          }
          if (!(role._id in permissions)) {
            permissions[role._id] = {}
          }
          permissions[role._id][permission._id] = securityRequirement(permission.access)
        } else {
          if (permission._id in permissions) {
            permissions[permission._id] = mergePermissions(permissions[permission._id], securityRequirement(permission.access))
          } else {
            permissions[permission._id] = securityRequirement(permission.access)
          }
        }
      }
    }
  }
  //roll up permissions (efficiency)
  for (let key in positionRoles) {
    for (let perm in permissions[key]) {
      if (perm in permissions) {
        if ((permissions[perm] & permissions[key][perm]) === permissions[key][perm]) {
          delete permissions[key][perm]
        }
      }
    }
  }

  security = {
    userId: member.user_id,
    companyId: member.company_id,
    teamIds: teamIds,
    roles: member.roles,
    positionRoles: positionRoles,
    permissions: permissions
  }
  return security
}

setTimeout(main, 1500);

