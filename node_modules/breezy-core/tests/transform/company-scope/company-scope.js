'use strict'

const breezyConfig = require('../../../data/config')
require('../../../src/util/breezy-config').initConfig(breezyConfig)
const mongo = require('../../../src/db/mongoClient')()
const helpers = require('../../../src/util/helpers')
const scopeClient = require('../../../src/lib/security/core-role-scope')
const positionClient = require('../../../src/lib/position/core-position')
const securityConfig = require('../../../data/security-config')
const uuid = require('uuidv4')

const COMPANY_ID = 'e16af8b6eb68'


async function main() {

  let positions = await scopeClient.getMemberPositions(COMPANY_ID, '210edab421ee')

  console.log(positions, positions.length)

  await scopeClient.removeMemberScopes(COMPANY_ID, '210edab421ee')

  positions = await scopeClient.getMemberPositions(COMPANY_ID, '210edab421ee')

  console.log(positions, positions.length)
}

async function testAddRemovePositionTeams() {

  let time
  let getTime
  let results

  time = new Date()

  let id = 'team_' + uuid().slice(-12)
  let positionId = '7efee6eb8ef7'

  console.log('id', id)

  let position = await positionClient.getPositionById(positionId)
  let scope = await scopeClient.getPositionMembers(COMPANY_ID, positionId)
  console.log('admins', position.admins)
  console.log('users', position.users)
  console.log('teams', position.teams)
  console.log('scope', scope)
  console.log('--------------------------------------------------------\n')

  time = new Date()

  await positionClient.addTeamToPosition(COMPANY_ID, positionId, id, securityConfig.ROLE.HIRING_MANAGER)

  getTime = new Date() - time
  console.log('addMemberToPosition HIRING_MANAGER', getTime, 'ms')

  position = await positionClient.getPositionById(positionId)
  scope = await scopeClient.getPositionMembers(COMPANY_ID, positionId)
  console.log('admins', position.admins)
  console.log('users', position.users)
  console.log('teams', position.teams)
  console.log('scope', scope)
  console.log('--------------------------------------------------------\n')

  time = new Date()

  await positionClient.removeTeamFromPosition(COMPANY_ID, positionId, id, securityConfig.ROLE.HIRING_MANAGER)

  getTime = new Date() - time
  console.log('removeMemberFromPosition HIRING_MANAGER', getTime, 'ms')

  position = await positionClient.getPositionById(positionId)
  scope = await scopeClient.getPositionMembers(COMPANY_ID, positionId)
  console.log('admins', position.admins)
  console.log('users', position.users)
  console.log('teams', position.teams)
  console.log('scope', scope)
  console.log('--------------------------------------------------------\n')

  time = new Date()

  await positionClient.addTeamToPosition(COMPANY_ID, positionId, id, securityConfig.ROLE.POSITION_MEMBER)

  getTime = new Date() - time
  console.log('addMemberToPosition POSITION_MEMBER', getTime, 'ms')

  position = await positionClient.getPositionById(positionId)
  scope = await scopeClient.getPositionMembers(COMPANY_ID, positionId)
  console.log('admins', position.admins)
  console.log('users', position.users)
  console.log('teams', position.teams)
  console.log('scope', scope)
  console.log('--------------------------------------------------------\n')

  time = new Date()

  await positionClient.removeTeamFromPosition(COMPANY_ID, positionId, id, securityConfig.ROLE.POSITION_MEMBER)

  getTime = new Date() - time
  console.log('removeMemberFromPosition POSITION_MEMBER', getTime, 'ms')

  position = await positionClient.getPositionById(positionId)
  scope = await scopeClient.getPositionMembers(COMPANY_ID, positionId)
  console.log('admins', position.admins)
  console.log('users', position.users)
  console.log('teams', position.teams)
  console.log('scope', scope)
  console.log('--------------------------------------------------------\n')
}

async function testAddRemovePositionMembers() {

  let time
  let getTime
  let results

  time = new Date()

  let id = 'user_' + uuid().slice(-12)
  //id = '12345'
  let positionId = '7efee6eb8ef7'

  console.log('id', id)

  let position = await positionClient.getPositionById(positionId)
  let scope = await scopeClient.getPositionMembers(COMPANY_ID, positionId)
  console.log('admins', position.admins)
  console.log('users', position.users)
  console.log('teams', position.teams)
  console.log('scope', scope)
  console.log('--------------------------------------------------------\n')

  time = new Date()

  await positionClient.addMemberToPosition(COMPANY_ID, positionId, id, securityConfig.ROLE.HIRING_MANAGER)

  getTime = new Date() - time
  console.log('addMemberToPosition HIRING_MANAGER', getTime, 'ms')

  position = await positionClient.getPositionById(positionId)
  scope = await scopeClient.getPositionMembers(COMPANY_ID, positionId)
  console.log('admins', position.admins)
  console.log('users', position.users)
  console.log('teams', position.teams)
  console.log('scope', scope)
  console.log('--------------------------------------------------------\n')

  time = new Date()

  await positionClient.removeMemberFromPosition(COMPANY_ID, positionId, id, securityConfig.ROLE.HIRING_MANAGER)

  getTime = new Date() - time
  console.log('removeMemberFromPosition HIRING_MANAGER', getTime, 'ms')

  position = await positionClient.getPositionById(positionId)
  scope = await scopeClient.getPositionMembers(COMPANY_ID, positionId)
  console.log('admins', position.admins)
  console.log('users', position.users)
  console.log('teams', position.teams)
  console.log('scope', scope)
  console.log('--------------------------------------------------------\n')

  time = new Date()

  await positionClient.addMemberToPosition(COMPANY_ID, positionId, id, securityConfig.ROLE.POSITION_MEMBER)

  getTime = new Date() - time
  console.log('addMemberToPosition POSITION_MEMBER', getTime, 'ms')

  position = await positionClient.getPositionById(positionId)
  scope = await scopeClient.getPositionMembers(COMPANY_ID, positionId)
  console.log('admins', position.admins)
  console.log('users', position.users)
  console.log('teams', position.teams)
  console.log('scope', scope)
  console.log('--------------------------------------------------------\n')

  time = new Date()

  await positionClient.removeMemberFromPosition(COMPANY_ID, positionId, id, securityConfig.ROLE.POSITION_MEMBER)

  getTime = new Date() - time
  console.log('removeMemberFromPosition POSITION_MEMBER', getTime, 'ms')

  position = await positionClient.getPositionById(positionId)
  scope = await scopeClient.getPositionMembers(COMPANY_ID, positionId)
  console.log('admins', position.admins)
  console.log('users', position.users)
  console.log('teams', position.teams)
  console.log('scope', scope)
  console.log('--------------------------------------------------------\n')
}

async function getCompanyScope(criteria) {

  try {
    return mongo.getDocumentsAsync({
      collection: 'company_scope',
      criteria: criteria
    })
  } catch (e) {
    console.error(e)
  }
}

async function buildScopesFromPositionData() {

  await mongo

  //* @param {collection, criteria, sort, limit, skip, project} data
  let positions = await mongo.getDocumentsAsync({
    collection: 'position',
    criteria: {company_id: COMPANY_ID}
  })

  let scopes = []

  for (let position of positions) {
    for (let id of position.admins) {
      let scope = {
        _id: helpers.getId(COMPANY_ID),
        company_id: COMPANY_ID,
        role: 'manager',
        member_id: id,
        position_id: position._id
      }
      scopes.push(scope)
    }
    for (let id of position.users) {
      let scope = {
        _id: helpers.getId(COMPANY_ID),
        company_id: COMPANY_ID,
        role: 'member',
        member_id: id,
        position_id: position._id
      }
      scopes.push(scope)
    }
    if (position.teams) {
      for (let id of position.teams.admin) {
        let scope = {
          _id: helpers.getId(COMPANY_ID),
          company_id: COMPANY_ID,
          role: 'manager',
          team_id: id,
          position_id: position._id
        }
        scopes.push(scope)
      }
      for (let id of position.teams.member) {
        let scope = {
          _id: helpers.getId(COMPANY_ID),
          company_id: COMPANY_ID,
          role: 'manager',
          team_id: id,
          position_id: position._id
        }
        scopes.push(scope)
      }
    }
  }

  console.log(scopes)
}

setTimeout(main, 1500);

// main().then(() => {
//   console.log('Done');
// }).catch((e) => {
//   console.error(e);
// });
