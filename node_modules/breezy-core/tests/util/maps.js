'use strict'

const {mapSeries} = require('../../src/util/maps')
const {delay} = require('../../src/util/delay')
const FOLDER = ''


main().then(() => {
  console.log('Exiting...');
}).catch((e) => {
  console.error(e);
});

async function main() {


  console.log('Testing Delay')

  console.log(await delay(500, 'sup'))

  console.log('Testing nativeMapSeries')
  nativeMapSeries()


  console.log('Testing bluebirdMapSeries')
  bluebirdMapSeries();

}

function nativeMapSeries() {

  let fileNames = [FOLDER + '1.txt', Promise.resolve(FOLDER + '2.txt'), FOLDER + '3.txt', delay(500, FOLDER + '4.txt'), FOLDER + '5.txt'];

  const fileSystem = require('fs')

  mapSeries(fileNames, function (fileName, index, arrayLength) {

    return fileSystem.readFileSync(fileName, 'utf8');

  }).then(function (result) {
    console.log('Done!')
    console.log(result);
  });
}

function bluebirdMapSeries() {
  console.log('Bluebird MapSeries')
  const Promise = require('bluebird');
  const fs = Promise.promisifyAll(require('fs'))
  let fileNames = [FOLDER + '1.txt', Promise.resolve(FOLDER + '2.txt'), FOLDER + '3.txt', delay(500, FOLDER + '4.txt'), FOLDER + '5.txt'];

  Promise.mapSeries(fileNames, function (fileName, index, arrayLength) {

    return fs.readFileAsync(fileName).then(function (fileContents) {
      return fileContents.toString();
    });
  }).then(function (result) {
    console.log('Done!')
    console.log(result);
  });
}