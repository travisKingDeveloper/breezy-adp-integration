'use strict'

const express = require('express')
const {context, positionContext} = require('../middleware/context-manager')
const {AccessManager} = require('../security/access-manager')
const candidateRouter = require('../../src/routes/candidate-routes')
const {secureRoute, ROLE_SCOPE, PERMISSION, ACCESS} = require('../../src/middleware/route-security')

const router = express.Router()
const LOG_NS = '[POSITIONS]'
const BASE_PATH = '/position'

router.get(BASE_PATH, secureRoute(PERMISSION.POSITION_ACCESS), getPositions)

router.get(BASE_PATH + '/:positionId', getPosition)

router.get(BASE_PATH + '/:positionId/a', secureRoute(PERMISSION.POSITION_ACCESS), getPosition)

router.get(BASE_PATH + '/:positionId/b', secureRoute(PERMISSION.POSITION_ACCESS, ROLE_SCOPE.POSITION, {update: true}), getPosition)

router.get(BASE_PATH + '/:positionId/c', secureRoute(PERMISSION.POSITION_ACCESS, ROLE_SCOPE.POSITION), getPosition)

router.get(BASE_PATH + '/:positionId/d', secureRoute(PERMISSION.POSITION_ACCESS, ROLE_SCOPE.NONE, {update: true}), getPosition)

router.get(BASE_PATH + '/:positionId/e', secureRoute(PERMISSION.DISCUSSION_MESSAGE_ACCESS, ROLE_SCOPE.POSITION), getPosition)

router.all(BASE_PATH + '/new', createPosition)

router.param('positionId', positionContext())

router.use(BASE_PATH + '/:positionId', candidateRouter)


/**
 * gets a position
 * @param req
 * @param res
 * @returns {Promise<void>}
 */
async function getPosition(req, res) {

  try {
    let position = await context.position()
    let security = await context.security()
    console.log(security)

    res.send(position)
  } catch (e) {
    console.error(LOG_NS, 'Error retrieving position', e)
    res.status(400).send('Something bad happened')
  }
}

/**
 * more positions
 * @param req
 * @param res
 * @returns {Promise<void>}
 */
async function getPositions(req, res) {
  console.log(LOG_NS, 'getPositions')
  let security = await context.security()

  console.log(security)

  security.userCan(PERMISSION.POSITION_ACCESS, {read: true}, 'e43bcec9a0e0')

  let model = security.export('e43bcec9a0e0')

  let s = new AccessManager(model)

  s.userCan(PERMISSION.POSITION_ACCESS, {read: true}, '826d0eccadfe')

  let model2 = s.export('826d0eccadfe')

  console.log(model2)

  delete model2.permissions

  let s2 = new AccessManager(model2)

  s2.userCan(PERMISSION.POSITION_ACCESS, {read: true}, '826d0eccadfe')

  console.log('original', model)

  res.send('getPositions')
}

/**
 * creates a position
 * @param req
 * @param res
 * @returns {Promise<void>}
 */
async function createPosition(req, res) {
  console.log(LOG_NS, 'createPosition')

  let security = await context.security()

  console.log(LOG_NS, 'security ' + security)

  if (!security || !security.userCan(PERMISSION.POSITION_ACCESS, {create: true})) {
    console.log(LOG_NS, 'unauthorized')
    res.status(401).send('unauthorized')
  } else {
    console.log(LOG_NS, 'created a new position')
    res.send('new position')
  }
}

module.exports = router
