'use strict'

const {context} = require('../../src/middleware/context-manager')
const {ACCESS} = require('../../data/security-config')
const LOG_NS = '[CORE-SECURITY-MIDDLEWARE]'
const ROLE_SCOPE = {
  NONE: 0,
  POSITION: 1 << 0
}

class SecurityMiddleware {

  /**
   *
   * @param permissionId
   * @param scope
   * @param access
   */
  constructor(permissionId, scope, access) {

    this._permissionId = permissionId
    this._scope = scope
    this._access = access
  }

  async _getScopeId() {

    try {
      let position = await context.position()
      if (position) {
        return position._id
      }
    } catch (e) {
      console.error(LOG_NS, '_getScopeId', e)
    }
    return
  }

  /**
   * pulls and verifies a context then performs the check
   * @param req
   * @param res
   * @param next
   * @param access
   * @returns {Promise<void>}
   * @private
   */
  async _verify(req, res, next, access) {
    access = this._access ? this._access : access
    let scope
    if (!context) {
      console.error(LOG_NS, 'context undefined', req.originalUrl)
      res.sendStatus(401)
    }
    let security = await context.security()
    if (!security) {
      console.error(LOG_NS, 'security object missing from context', req.originalUrl)
      res.sendStatus(401)
    }
    if (this._scope) {
      scope = await this._getScopeId()
      if (this._permissionId && security.userCan(this._permissionId, access, scope)) {
        return next()
      }
    } else {
      if (this._permissionId && security.userCan(this._permissionId, access)) {
        return next()
      }
    }
    let details = {}
    if (security) {
      details.userId = security.getUserId()
      details.roles = security.getRoles()
    }
    console.warn(LOG_NS, req.originalUrl, 'restricted by', this._permissionId, access, this._scope, scope, details)
    res.sendStatus(401)
  }

  /**
   * Verifies permission for create access
   * @param req
   * @param res
   * @param next
   * @returns {Promise<void>}
   */
  async create(req, res, next) {
    try {
      await this._verify(req, res, next, ACCESS.CREATE)
    } catch (e) {
      console.error(LOG_NS, e)
    }
  }

  /**
   * Verifies permission for read access
   * @param req
   * @param res
   * @param next
   * @returns {Promise<void>}
   */
  async read(req, res, next) {
    try {
      await this._verify(req, res, next, ACCESS.READ)
    } catch (e) {
      console.error(LOG_NS, e)
    }
  }

  /**
   * Verifies permission for update access
   * @param req
   * @param res
   * @param next
   * @returns {Promise<void>}
   */
  async update(req, res, next) {
    try {
      await this._verify(req, res, next, ACCESS.UPDATE)
    } catch (e) {
      console.error(LOG_NS, e)
    }
  }

  /**
   * Verifies permission for delete access
   * @param req
   * @param res
   * @param next
   * @returns {Promise<void>}
   */
  async delete(req, res, next) {
    try {
      await this._verify(req, res, next, ACCESS.DELETE)
    } catch (e) {
      console.error(LOG_NS, e)
    }
  }
}

module.exports = {
  SecurityMiddleware,
  ROLE_SCOPE: ROLE_SCOPE
}
