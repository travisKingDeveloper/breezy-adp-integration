'use strict'

const mongo = require('../../db/mongoClient')()
const helpers = require('../../util/helpers')
const _ = require('lodash')

const CACHE_KEY = 'BREEZY_APPLICATION_SETTINGS'
const CACHE_TTL = 86400 * 7
const DB_COLLECTION = 'application_settings'
const LOG_NS = 'CORE-APP-SETTINGS'

/*
SCHEMA - APPLICATION_SETTINGS

{
  _id
  version
  tos_date
  updated_date
}

*/


var FIELDS = ['version', 'tos_date']

module.exports = {

  getApplicationSettings: getApplicationSettings,
  updateApplicationSettings: updateApplicationSettings,
}

async function getApplicationSettings() {

  let settings
  try {
    settings = await helpers.cache.chooseCache(null).getAsync(CACHE_KEY)
  } catch (e) {
    console.error(e)
    return
  }

  if (settings) {
    return JSON.parse(settings)
  }

  try {
    settings = await mongo.getDocumentAsync({
      collection: DB_COLLECTION,
      criteria: {}
    })
  } catch (e) {
    console.error(LOG_NS, e)
    return
  }

  console.log('CACHE getApplicationSettings got from db, storing to cache', settings)
  if (settings) helpers.cache.chooseCache(null).set(CACHE_KEY, JSON.stringify(settings), CACHE_TTL, function (error, value) {
  })
  return settings
}

// data{ applicationSettings{FIELDS} }
async function updateApplicationSettings(data) {
  let applicationSettings = sanitizeObj(data.applicationSettings)

  applicationSettings.updated_date = new Date()

  let result

  try {
    result = await mongo.findAndModifyAsync({
      collection: DB_COLLECTION,
      criteria: {},
      updates: applicationSettings
    })
  } catch (e) {
    console.error(e)
    return
  }

  console.log('CACHE updateApplicationSettings delete cache key', CACHE_KEY)
  helpers.cache.chooseCache(null).delete(CACHE_KEY, function () {
  })
  return result
}

// ~~~~ HELPERS ~~~~

// data{FIELDS}
function sanitizeObj(obj) {
  let sanitizedObj = {}

  FIELDS.forEach(function (field) {
    if (typeof obj[field] !== 'undefined') {
      sanitizedObj[field] = obj[field]
    }
  })

  return sanitizedObj
}
