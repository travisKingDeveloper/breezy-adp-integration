'use strict'

const mongo = require('../../db/mongoClient')()
const securityCache = require('../security/core-security-cache')
const {ROLE} = require('../../../data/security-config')
const LOG_NS = '[CORE-MEMBERS]'
const MEMBER_COLLECTION = 'member'

module.exports = {
  getMembersByCompanyId,
  getCompanyMember,
  addCompanyRoleToUser,
  removeCompanyRoleFromUser,
  setCompanyRole,
  migrateCompanyRoleMembers,
  getCompanyMembersByRole,
  migrateCompanyMembersFromCompany
}

/**
 *
 * @param companyId
 * @returns {Promise<*>}
 */
async function getMembersByCompanyId(companyId) {
  let criteria = {'company_id': companyId};

  try {
    return await mongo.getDocumentsAsync({
      collection: MEMBER_COLLECTION,
      criteria: criteria,
      limit: 1000
    })
  } catch (e) {
    console.error(LOG_NS, e)
  }
}

/**
 * Gets a company member
 * @param companyId
 * @param userId
 * @returns {Promise<*>}
 */
async function getCompanyMember(companyId, userId) {
  let member
  try {
    member = await mongo.getDocumentAsync({
      collection: MEMBER_COLLECTION,
      criteria: {company_id: companyId, user_id: userId}
    })
  } catch (e) {
    console.error(LOG_NS, e)
  }
  return member
}

/**
 *
 * @param companyId
 * @param roleId
 * @returns {Promise<*>}
 */
async function getCompanyMembersByRole(companyId, roleId) {
  let members = []
  try {
    members = await mongo.getDocumentsAsync({
      collection: MEMBER_COLLECTION,
      criteria: {company_id: companyId, roles: roleId}
    })
  } catch (e) {
    console.error(LOG_NS, e)
  }
  return members
}

/**
 *
 * @param {string} companyId
 * @param {string} userId
 * @param {string} role
 * @returns {Promise<void>}
 */
async function addCompanyRoleToUser(companyId, userId, role) {

  await updateCompanyMember(
    {company_id: companyId, user_id: userId},
    {$addToSet: {roles: role}},
    {upsert: true})

  securityCache.invalidateCache(companyId, userId)
}

/**
 *
 * @param companyId
 * @param userId
 * @param role
 * @returns {Promise<void>}
 */
async function setCompanyRole(companyId, userId, role) {

  await updateCompanyMember(
    {company_id: companyId, user_id: userId},
    {$set: {roles: [role]}})

  securityCache.invalidateCache(companyId, userId)
}

/**
 *
 * @param {string} companyId
 * @param {string} userId
 * @param {string} role
 * @returns {Promise<void>}
 */
async function removeCompanyRoleFromUser(companyId, userId, role) {

  await updateCompanyMember(
    {company_id: companyId, user_id: userId},
    {$pull: {roles: role}})

  securityCache.invalidateCache(companyId, userId)
}

/**
 *
 * @param companyId
 * @param source
 * @param target
 * @returns {Promise<void>}
 */
async function migrateCompanyRoleMembers(companyId, source, target) {

  let migratedMembers = await mongo.getDocumentsAsync({
    collection: MEMBER_COLLECTION,
    criteria: {company_id: companyId, roles: source},
    limit: 1000
  })

  if (target) {
    await updateCompanyMember(
      {company_id: companyId, roles: source},
      {$addToSet: {roles: target}},
      {multi: true})
  }

  await updateCompanyMember(
    {company_id: companyId, roles: source},
    {$pull: {roles: source}},
    {multi: true})

  console.log(LOG_NS, 'Clearing security cache for', migratedMembers.length, 'company members migrated from', source, 'to', target)
  for (let member of migratedMembers) {
    let memberId = member.user_id
    securityCache.invalidateCache(companyId, memberId)
  }
}

/**
 *
 * @param {object} criteria
 * @param {object} updates
 * @param {object} options
 * @returns {Promise<void>}
 */
async function updateCompanyMember(criteria, updates, options = {}) {

  try {
    return await mongo.updateDocumentAsync({
      collection: MEMBER_COLLECTION,
      criteria: criteria,
      updates: updates,
      options: options
    })
  } catch (e) {
    console.error(LOG_NS, e)
  }
}

async function migrateCompanyMembersFromCompany(company) {

  if (company) {

    await updateCompanyMember(
      {company_id: company._id},
      {$set: {roles: [ROLE.COMPANY_MEMBER]}},
      {multi: true})

    if (company.admins && company.admins.length > 0) {
      await updateCompanyMember(
        {company_id: company._id, user_id: {$in: company.admins}},
        {$set: {roles: [ROLE.COMPANY_ADMIN]}},
        {multi: true})
    }
  }
}

