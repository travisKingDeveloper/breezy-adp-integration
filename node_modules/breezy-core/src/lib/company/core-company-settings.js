'use strict'

const mongo = require('../../db/mongoClient')()
const helpers = require('../../util/helpers')
const LOG_NS = '[CORE-COMPANY-SETTINGS]'

module.exports = {
  updateCompanySetting
}

/**
 *
 * @param company
 * @param companySettingData
 * @param user
 */
async function updateCompanySetting(company, companySettingData, user) {

  if (!company) {
    console.error(LOG_NS, 'Company not found')
    return
  }

  let criteria = {'_id': company._id}
  let updated_data = {}
  let updates = {}

  // if (companySettingData.hasOwnProperty('auto_disqualify')) {
  //   updated_data.auto_disqualify = {
  //     old: company.settings.ats.auto_disqualify,
  //     new: companySettingData.auto_disqualify
  //   }
  //   updates['settings.ats.auto_disqualify'] = companySettingData.auto_disqualify
  //   return _doIt(criteria, updates, company)
  // }
  // if (companySettingData.hasOwnProperty('candidate_management_company_admin')) {
  //   updated_data.candidate_management_company_admin = {
  //     old: company.settings.ats.candidate_management_company_admin,
  //     new: companySettingData.candidate_management_company_admin
  //   }
  //   updates['settings.ats.candidate_management_company_admin'] = companySettingData.candidate_management_company_admin
  //   return _doIt(criteria, updates, company)
  // }
  // if (companySettingData.hasOwnProperty('promotion_staffing')) {
  //   updated_data.promotion_staffing = {
  //     old: company.settings.ats.promotion.staffing,
  //     new: companySettingData.promotion_staffing
  //   }
  //   updates['settings.ats.promotion.staffing'] = companySettingData.promotion_staffing
  //   return _doIt(criteria, updates, company)
  // }
  // if (companySettingData.hasOwnProperty('promotion_no_indeed')) {
  //   updated_data.promotion_no_indeed = {
  //     old: company.settings.ats.promotion.no_indeed,
  //     new: companySettingData.promotion_no_indeed
  //   }
  //   updates['settings.ats.promotion.no_indeed'] = companySettingData.promotion_no_indeed
  //   return _doIt(criteria, updates, company)
  // }
  if (companySettingData.hasOwnProperty('role_based_security_enabled')) {
    updated_data.role_based_security_enabled = {
      old: company.settings.ats.role_based_security_enabled,
      new: companySettingData.role_based_security_enabled
    }
    updates['settings.ats.role_based_security_enabled'] = companySettingData.role_based_security_enabled
    return _doIt(criteria, updates, company)
  }
}

function _doIt(criteria, updates, company) {
  mongo.findAndModify({
    collection: 'company',
    criteria: criteria,
    updates: updates
  }, function (error, result) {
    if (!result) {
      console.error(LOG_NS, 'Error updating company setting', error)
      return
    }
    console.log('[ADMIN] - company settings updated:', company._id)
    //that.addAdminActivity('companySettingsUpdated', {company: company, updated_data: updated_data}, user)
    cacheDelete('BREEZY_INDEED_EXCLUDED_COMPANIES', function () {
    })
    deleteCompanyCaches(company)
    return result
  })
}

function deleteCompanyCaches(company) {
  cacheDelete('BREEZY_COMPANY_' + company._id, function () {
  })
  cacheDelete('BREEZY_COMPANY_FEATURES_' + company._id, function () {
  })
  cacheDelete('BREEZY_COMPANY_BY_FRIENDLY_' + company.friendly_id, function () {
  })
  cacheDelete('BREEZY_COMPANY_MESSENGER_' + company._id, function () {
  })
  cacheDelete('BREEZY_COMPANY_PORTAL_POSITIONS_' + company._id, function () {
  })
  cacheDelete('BREEZY_COMPANY_PORTAL_' + company._id, function () {
  })
}

function cacheDelete(key) {
  helpers.cache.deleteGlobalKey(key, () => {
  })
}