'use strict'

const mongo = require('../../db/mongoClient')()
const _ = require('lodash')
const LOG_NS = '[CORE-POSITION-APPROVAL]'
const POSITION_APPROVAL_COLLECTION = 'position_approval'
const STATUS_PENDING = 'pending'
const APPROVAL_TYPE_CHAIN = 'chain'

module.exports = {
  getPendingPositionApproval: getPendingPositionApproval,
  isPositionApprovalReviewable: isPositionApprovalReviewable,
}

/**
 *getPendingPositionApproval
 * @param {companyId, positionId} data
 * @returns {Promise<*>}
 */
async function getPendingPositionApproval(data) {
  try {
    let approvals = await mongo.getDocumentsAsync({
      collection: POSITION_APPROVAL_COLLECTION,
      criteria: {
        status: STATUS_PENDING,
        company_id: data.companyId,
        position_id: data.positionId
      },
      sort: {creation_date: -1},
      limit: 1
    })
    let approval = approvals[0]
    return getSimpleApproval(approval)
  } catch (e) {
    console.error(LOG_NS, e)
  }
  return
}

/**
 * isPositionApprovalReviewable
 * @param  {actingUser, approval} data
 * @returns {*}
 */
async function isPositionApprovalReviewable(data) {
  let approval = data.approval,
    actingUser = data.actingUser

  if (approval.type === APPROVAL_TYPE_CHAIN) {
    let nextApprover = _.find(approval.approvers, function (a) {
      return !a.approved
    })

    return !(!nextApprover || nextApprover._id !== actingUser._id)

  } else {
    return _.find(approval.approvers, function (a) {
      return a._id === actingUser._id
    })
  }
}

/**
 * getSimpleApproval
 * @param approval
 * @returns {object} approval
 */
function getSimpleApproval(approval) {
  if (!approval) return

  let result = {
    _id: approval._id,
    status: approval.status,
    type: approval.type,
    attachments: approval.attachments,
    note: approval.note,
    acting_user: approval.acting_user,
    creation_date: approval.creation_date,
    approvers: approval.approvers
  }

  if (result.type === APPROVAL_TYPE_CHAIN) {
    result.approved_count = _.filter(approval.approvers, function (a) {
      return a.approved
    }).length
    result.total_approver_count = approval.approvers.length
  }
  return result
}