'use strict'

const mongo = require('../../db/mongoClient')()
const helpers = require('../../util/helpers')
const {getConfig} = require('../../util/breezy-config')
const config = getConfig()

const LOG_NS = '[CORE-USER]'
const USER_CACHE_KEY = 'BREEZY_USER_'
const USER_COLLECTION = 'user'
const USER_NIMBLEBOT = 'nimblebot'

module.exports = {
  getUserById
}

/**
 * Get a user from by their id
 * @param userId
 * @returns {Promise<*>}
 */
async function getUserById(userId) {

  if (userId === USER_NIMBLEBOT) {
    return config.NimbleBot
  }

  let cache = await getUserFromCache(userId)
  if (cache) {
    return cache
  }

  let user = await getUser({'_id': userId})

  user = helpers.sanitizeUser(user)

  if (user) {
    helpers.cache.chooseCache(null).set(USER_CACHE_KEY + userId, JSON.stringify(user), 43200, function (error, value) {
    })
  }

  return user
}

/**
 * Gets a user from cache
 * @param userId
 * @returns {Promise<any>}
 */
async function getUserFromCache(userId) {

  let user = await helpers.cache.chooseCache(null).getAsync(USER_CACHE_KEY + userId)
  if (user) {
    return JSON.parse(user)
  }
}

/**
 * Gets a user from the db
 * @param criteria
 * @returns {Promise<*>}
 */
async function getUser(criteria) {

  try {
    return mongo.getDocumentAsync({
      collection: USER_COLLECTION,
      criteria: criteria
    })
  } catch (e) {
    console.error(LOG_NS, e)
  }
}
