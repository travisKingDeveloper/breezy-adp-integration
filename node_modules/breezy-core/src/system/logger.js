'use strict'
/* eslint no-unused-expressions: 0 */ // --> OFF

const os = require('os')
const trace = require('../middleware/express-request-trace')
const winston = require('winston')

const {combine, colorize, printf} = winston.format
const util = require('util')
require('winston-syslog').Syslog
const {getConfig} = require('../util/breezy-config')
const config = getConfig()
const logId = process.env.LOGID ? ` [${process.env.LOGID}]` : ''
const HOST_NAME = os.hostname()

const logLevels = {
  levels: {
    emerg: 0,
    alert: 1,
    crit: 2,
    error: 3,
    warning: 4,
    notice: 5,
    info: 6,
    debug: 7,
  },
  colors: {
    emerg: 'red',
    alert: 'red',
    crit: 'red',
    error: 'red',
    warning: 'yellow',
    notice: 'yellow',
    info: 'green',
    debug: 'blue',
  },
}

winston.addColors(logLevels.colors)

const traceFormat = combine(
  colorize(),
  printf(info => {
    const rid = trace.id()
    if (rid) {
      return `[${info.level}] [${rid}] ${info.message}`
    }
    return `[${info.level}] ${info.message}`
  })
)

const traceSyslogFormat = combine(
  colorize(),
  printf(info => {
    const rid = trace.id()
    if (rid) {
      return `[${info.level}]${logId} [${rid}] ${info.message.substr(0, 1024)}`
    }
    return `[${info.level}]${logId} ${info.message.substr(0, 1024)}`
  })
)

const breezyTransports = [new winston.transports.Console({level: 'debug', format: traceFormat})]

function formatArgs(args) {
  return [util.format.apply(util.format, Array.prototype.slice.call(args))]
}


module.exports = function () {

  if (config.env === 'production') {
    breezyTransports.push(
      new winston.transports.Syslog({
        host: config.logserver,
        protocol: 'udp4',
        app_name: config.serviceName,
        localhost: HOST_NAME,
        format: traceSyslogFormat
      })
    )
  }

  const logger = winston.createLogger({
    levels: logLevels.levels,
    transports: breezyTransports,
  })

  console.log = function (...args) {
    logger.info(...formatArgs(args))
  }
  console.info = function (...args) {
    logger.info(...formatArgs(args))
  }
  console.warn = function (...args) {
    logger.warning(...formatArgs(args))
  }
  console.error = function (...args) {
    logger.error(...formatArgs(args))
  }
  console.debug = function (...args) {
    logger.debug(...formatArgs(args))
  }

  return {
    logger,
    trace
  }
}
