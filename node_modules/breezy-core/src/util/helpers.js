'use strict'

const url = require('url')
const uuid = require('node-uuid')
const {getConfig} = require('../util/breezy-config')
const config = getConfig()
const base64url = require('base64url')
const cache_us = require('../lib/redis')()
//let cache_eu = require('../libs/redis')(config.Redis_EU)
const PNF = require('google-libphonenumber').PhoneNumberFormat
const phoneUtil = require('google-libphonenumber').PhoneNumberUtil.getInstance()
const crypto = require('crypto'),
  algorithm = 'aes-256-ctr',
  password = '7B129C09-20CB-40BC-AAD9-8B6AF1BBF4F0'
const securityConfig = require('../../data/security-config')
const LOG_NS = '[HELPERS]'

function _getRandomColor() {
  let colors = [
    "rgb(20,142,185)",
    "rgb(255,159,90)",
    "rgb(114,215,143)",
    "rgb(136,107,186)"
  ]
  return colors[Math.floor(Math.random() * colors.length)]
}

module.exports = {

  encrypt: function (value) {
    let buffer = new Buffer(value, "utf8")
    let cipher = crypto.createCipher(algorithm, password)
    let crypted = Buffer.concat([cipher.update(buffer), cipher.final()])
    return crypted.toString('base64')
  },

  decrypt: function (value) {
    let buffer = new Buffer(value, 'base64')
    let decipher = crypto.createDecipher(algorithm, password)
    let dec = Buffer.concat([decipher.update(buffer), decipher.final()])
    return dec.toString('utf8')
  },

  hash: function (value) {
    let hash = crypto.createHash('sha256')
    hash.update(value + password)
    return hash.digest('hex')
  },

  getHashId: function (value, length) {
    if (!length) length = 12
    let hash = crypto.createHash('sha256')
    hash.update(value + password)
    return hash.digest('hex').slice(0, length)
  },

  getId: function (dependency_id) {
    let baseId = uuid.v4().split('-')[4]
    if (dependency_id && dependency_id.length > 12) {
      if (dependency_id.slice(-2) == config.region_codes.eu) {
        baseId += config.region_codes.eu
      }
    }
    return baseId
  },

  getUsernameFromName: function (name) {
    return name.replace(/\W/g, '').toLowerCase()
  },

  normalizeEmail: function (email) {
    email = email.toLowerCase()
    email = email.trim()
    return email
  },

  sanitizeUser: function (user) {
    if (!user) {
      return
    }
    delete user.password
    delete user.h_password
    delete user.google_id
    return user
  },

  getColorFromHexValue: function (hexValue) {
    hexValue = hexValue.toLowerCase()
    let x = parseInt(hexValue.substring(0, 1), 16)
    if (x < 3) {
      return 'color1' //config.NimbleColors[0]
    }
    if (x < 6) {
      return 'color2' //config.NimbleColors[1]
    }
    if (x < 9) {
      return 'color3' //config.NimbleColors[2]
    }
    return 'color4' //config.NimbleColors[3]
  },

  getDefaultApplicationForm: function () {
    return {
      'name': 'required',
      'headline': 'optional',
      'summary': 'optional',
      'profile_photo': 'optional',
      'address': 'optional',
      'email_address': 'required',
      'phone_number': 'optional',
      'resume': 'optional',
      'work_history': 'optional',
      'education': 'optional',
      'cover_letter': 'optional'
    }
  },

  userIsAssignable: function (user) {

    let is_assignable = false
    if (user && user.roles) {
      for (let role of user.roles) {
        if (role.id === securityConfig.ROLE.HIRING_MANAGER) {
          is_assignable = true
          break
        }
        if (role.id === securityConfig.ROLE.COMPANY_ADMIN) {
          is_assignable = true
          break
        }
        // if (role.id === securityConfig.ROLE.SYSTEM_ONLY) {
        //   is_assignable = true
        //   break
        // }
      }
    }
    return is_assignable
  },

  postProcessUserPosition: function (position, company, actingUser, security) {

    // position.teams = this.initializePositionTeams(position)

    if (actingUser) {
      position.is_starred = position.starred_by.indexOf(actingUser._id) > -1
    }

    if (position.custom_attributes && (!security || !security.userCan(securityConfig.PERMISSION.CUSTOM_FLD_ACCESS, {read: true}, position._id))) {
      delete position.custom_attributes
    }

    if (position.custom_attributes) {
      // decrypt
      position.custom_attributes.forEach(custom_attribute => {
        if (custom_attribute.secure && custom_attribute.encrypted_value) {
          custom_attribute.value = this.decrypt(custom_attribute.encrypted_value)
          delete custom_attribute.encrypted_value
        }
      })
    }

    if (position.stats) {
      let applicantCount = position.stats.applicant_count
      position.stats = {
        "applicant_count": applicantCount
      }
    }

    if (!position.pipeline_id) {
      if (position.org_type === "pool") {
        position.pipeline_id = "default_pool"
      } else {
        position.pipeline_id = "default"
      }
    }

    return position
  },

  getCompanyRolesByMember: function (member) {
    let roles = []
    if (member && member.roles) {
      for (let role of member.roles) {
        for (let defaultRole of securityConfig.defaultRoles) {
          if (role === defaultRole._id) {
            roles.push({
              id: defaultRole._id,
              name: defaultRole.name
            })
          }
        }
      }
    }
    return roles
  },

  initializePositionTeams: function (position) {
    if (!position.teams) {
      position.teams = {
        admin: [],
        member: []
      }
    }
    if (!position.teams.admin) position.teams.admin = []
    if (!position.teams.member) position.teams.member = []

    return position.teams
  },

  cleanEntityId: function (entity) {
    return entity.toLowerCase().trim()
      .replace(/\(/g, "")
      .replace(/\)/g, "")
      .replace(/,/g, "")
      .replace(/ /g, "-")
      .replace(/\//g, "-")
      .replace(/--/g, "-")
  },

  getFriendlyId: function (name) {
    name = name.toLowerCase()
    name = name.trim()
    name = name.replace('  ', ' ')
    name = name.replace(/\W/g, '-')
    name = name.replace('_', '-')
    name = name.replace('---', '-')
    name = name.replace('--', '-')
    name = name.replace(/-+$/, '')
    name = name.replace(/^-+/, '')
    return name
  },

  getLocationName: function (location) {
    let country = location.country
    let state = location.state
    let city = location.city
    if (city && city.toLowerCase() === "remote") {
      return "Remote"
    }
    if (country && state && city) {
      return city + ', ' + state.id
    } else if (country && city) {
      return city + ', ' + country.id
    } else if (city) {
      return city
    } else if (country) {
      return country.name
    }
  },

  getDefaultPortal: function () {
    let result = {}
    result.layout = {
      'type': 'bold',
      'sections': [
        {'type': 'general', 'name': 'General'},
        {'type': 'perks', 'name': 'Perks'},
        {'type': 'media', 'name': 'Image Gallery'},
        {'type': 'testimonials', 'name': 'Testimonials'},
        {'type': 'positions', 'name': 'Positions list'},
        {'type': 'employees', 'name': 'Employees'}
      ]
    }
    result.appearance = {
      'primary_color': _getRandomColor(),
      'apply': {
        'indeed': true,
        'linkedin': true
      }
    }
    result.messaging = {
      'header': 'Come work with us.',
      'subheader': "We're looking for great people to join our growing team."
    }
    result.media = {
      'gallery': []
    }
    result.general = {}
    result.testimonials = []
    result.employees = {
      'header': 'Our Team',
      'subheader': "",
      'list': []
    }
    result.perks = []
    result.social = {}
    return result
  },

  getYouTubeEmbedUrl: function (videoUrl) {
    if (!videoUrl) return
    let videoId = videoUrl.split('v=')[1]
    if (videoId) {
      let ampersandPosition = videoId.indexOf('&')
      if (ampersandPosition != -1) {
        videoId = videoId.substring(0, ampersandPosition)
      }
      return 'https://www.youtube.com/embed/' + videoId + '?enablejsapi=1'
    }
    return
  },

  getVimeoEmbedUrl: function (videoUrl) {
    if (!videoUrl) return

    let videoId = url.parse(videoUrl).pathname
    if (videoId) {
      return "https://player.vimeo.com/video" + videoId
    }
    return
  },

  sortObjectArrayByKey: function (array, key, dir) {
    if (dir == "desc") {
      return array.sort(function (a, b) {
        let x = a[key]
        let y = b[key]
        return ((x > y) ? -1 : ((x < y) ? 1 : 0))
      })
    } else {
      return array.sort(function (a, b) {
        let x = a[key]
        let y = b[key]
        return ((x < y) ? -1 : ((x > y) ? 1 : 0))
      })
    }
  },

  sortNestedObjectArrayByKey: function (array, key, dir) {
    key = key.split('.')
    let len = key.length

    if (dir == "desc") {
      return array.sort(function (a, b) {
        let i = 0
        while (i < len) {
          a = a[key[i]]
          b = b[key[i]]
          i++
        }
        if (typeof a == "undefined") {
          a = '0'
        }
        if (typeof b == "undefined") {
          b = '0'
        }
        return ((a > b) ? -1 : ((a < b) ? 1 : 0))
      })
    } else {
      return array.sort(function (a, b) {
        let i = 0
        while (i < len) {
          a = a[key[i]]
          b = b[key[i]]
          i++
        }
        if (typeof a == "undefined") {
          a = '0'
        }
        if (typeof b == "undefined") {
          b = '0'
        }
        return ((a < b) ? -1 : ((a > b) ? 1 : 0))
      })
    }
  },

  getCompanyFeatures: function (company, overrides) {
    let features = {}

    let setFeaturesDisabled = function () {

      features['position_limit'] = 0
      features['company_cloning'] = false
      features['cross_company_candidate_copy'] = false
      features['video_response'] = false
      features['video_response_length'] = false
      features['video_interview'] = false
      features['video_interview_archiving'] = false
      features['referral_portal'] = false
      features['recruiter_portal'] = false
      features['document_signing'] = false
      features['custom_domain'] = false
      features['reference_checking'] = false
      features['bulk_actions'] = false
      features['bulk_candidate_messaging'] = false
      features['candidate_pool_messaging'] = false
      features['hello_messenger'] = false
      features['tasks'] = false
      features['esig_limit'] = 0
      features['esig'] = false
      features['unlimited_approvals'] = false
      features['unlimited_offer_approvals'] = false;

      // V6
      features['hris'] = false
      features['developer_api'] = false
      features['background_checks'] = false
      features['advanced_reporting'] = false
      features['webhook'] = false

      // V7 only
      features['offers'] = false
      features['offer_approvals'] = false
      features['role_based_security'] = false;
    }

    let setV7PlanFeatureDefaults = function (planId) {

      features = {} // Use new features object

      features['unlimited_approvals'] = false;
      features['unlimited_offer_approvals'] = false;

      config.Features.v7.bootstrap.forEach(function (feature) {
        features[feature] = false
      })
      config.Features.v7.startup.forEach(function (feature) {
        features[feature] = false
      })
      config.Features.v7.business.forEach(function (feature) {
        features[feature] = false
      })
      config.Features.v7.pro.forEach(function (feature) {
        features[feature] = false
      })

      // Checkr partnership specific feature enablement
      if (company.source && company.source.id === "checkr") {
        features['background_checks'] = true
        features['developer_api'] = true
      }

      // Zenefits partnership specific feature enablement
      if (company.source && company.source.id === "zenefits") {
        features['background_checks'] = true
        features['multiple_pipeline'] = true
        features['interview_kits'] = true
        features['custom_scorecards'] = true
        features['questionnaires'] = true
        features['sso'] = true
      }

      let setBootStrapEnabled = function () {
        let FIELDS = config.Features.v7.bootstrap

        FIELDS.forEach(function (feature) {
          features[feature] = true
        })

        features['position_limit'] = 1
      }

      let setStartupEnabled = function () {
        let FIELDS = config.Features.v7.startup

        FIELDS.forEach(function (feature) {
          features[feature] = true
        })

        features['position_limit'] = 10000
      }

      let setBusinessEnabled = function () {
        setStartupEnabled() // Enable startup features

        let FIELDS = config.Features.v7.business

        FIELDS.forEach(function (feature) {
          features[feature] = true
        })

        features['position_limit'] = 10000
        features['esig_limit'] = 5
      }

      let setProEnabled = function () {
        setStartupEnabled() // Enable startup tier features
        setBusinessEnabled() // Enable business tier features

        let FIELDS = config.Features.v7.pro

        FIELDS.forEach(function (feature) {
          features[feature] = true
        })

        features['position_limit'] = 10000
      }

      let setFreebieEnabled = function () {
        setStartupEnabled() // Enable startup tier features
        setBusinessEnabled() // Enable business tier features
        setProEnabled() // Enable business tier features

        features['bulk_candidate_messaging'] = false
        features['custom_domain'] = true
        features['unlimited_approvals'] = true;
      }

      if (!planId) {
        console.log('setV7PlanFeatureDefaults: MISSING PLANID', planId)
        return features
      }


      if (planId.indexOf("v7_pro") > -1) setProEnabled()
      else if (planId.indexOf("v7_business") > -1) setBusinessEnabled()
      else if (planId.indexOf("v7_startup") > -1) setStartupEnabled()
      else if (planId.indexOf("v7_bootstrap") > -1) setBootStrapEnabled()
      else if (planId === "freebie") setFreebieEnabled()
      return features
    }

    let setV6PlanFeatureDefaults = function (planId) {

      // Enabled defaults
      features['bulk_candidate_messaging'] = true
      features['bulk_actions'] = true
      // V6
      features['background_checks'] = true
      features['advanced_reporting'] = false
      features['developer_api'] = true
      features['hris'] = true
      features['tasks'] = true
      features['recruiter_portal'] = true
      features['video_interview_archiving'] = true
      features['multi_interview'] = false

      if (planId === "v6custom") {
        features['position_limit'] = 50
        features['company_cloning'] = true
        features['cross_company_candidate_copy'] = true
        /* these 2 properties must ne the same, in v6 we incorrectly
          checked them in ats and having them out of sync would break
          features people had */
        features['video_response'] = true
        features['video_response_length'] = true
        features['video_interview'] = true
        /* END */
        features['document_signing'] = true
        features['custom_domain'] = true
        features['reference_checking'] = true
        features['referral_portal'] = true
        features['candidate_pool_messaging'] = true
        features['esig_limit'] = 1
        features['esig'] = true
        features['hello_messenger'] = true
        features['multi_interview'] = true
      } else if (planId === "v6growth") {
        features['position_limit'] = 10
        /* these 2 properties must ne the same, in v6 we incorrectly
          checked them in ats and having them out of sync would break
          features people had */
        features['video_response'] = true
        features['video_interview'] = true
        /* END */
        features['document_signing'] = true
        features['custom_domain'] = true
        features['reference_checking'] = true
        features['referral_portal'] = true
        features['candidate_pool_messaging'] = true
        features['esig_limit'] = 1
        features['esig'] = true
        features['hello_messenger'] = true
      }
      if (planId === "v6starter") {
        features['position_limit'] = 3
        features['custom_domain'] = true
      } else if (planId === "v6uno") {
        features['position_limit'] = 1
        features['bulk_candidate_messaging'] = false
        features['scheduling_links'] = false
      } else if (planId === "freebie") {
        features['position_limit'] = 40
        /* these 2 properties must ne the same, in v6 we incorrectly
          checked them in ats and having them out of sync would break
          features people had */
        features['video_response'] = true
        features['video_response_length'] = true
        features['video_interview'] = true
        /* END */
        features['document_signing'] = true
        features['custom_domain'] = true
        features['reference_checking'] = true
        features['referral_portal'] = true
        features['bulk_candidate_messaging'] = false
        features['candidate_pool_messaging'] = true
        features['hello_messenger'] = true
        features['multi_interview'] = true
      }
    }

    let setV5PlanFeatureDefaults = function (planId) {

      // Enabled defaults
      features['bulk_candidate_messaging'] = true
      features['developer_api'] = true
      features['hris'] = true
      features['recruiter_portal'] = true
      features['tasks'] = true
      features['bulk_actions'] = true
      features['background_checks'] = true
      features['multi_interview'] = false

      if (planId === "v5custom") {
        features['position_limit'] = 50
        features['company_cloning'] = true
        features['cross_company_candidate_copy'] = true
        features['video_response'] = true
        features['video_response_length'] = true
        features['video_interview'] = true
        features['document_signing'] = true
        features['custom_domain'] = true
        features['reference_checking'] = true
        features['referral_portal'] = true
        features['candidate_pool_messaging'] = true
        features['esig_limit'] = 1
        features['esig'] = true
        features['background_checks'] = true
        features['advanced_reporting'] = true
        features['hello_messenger'] = true
        features['multi_interview'] = true
      } else if (planId === "v5growth") {
        features['position_limit'] = 15
        features['video_response'] = true
        features['video_interview'] = true
        features['document_signing'] = true
        features['custom_domain'] = true
        features['reference_checking'] = true
        features['referral_portal'] = true
        features['candidate_pool_messaging'] = true
        features['esig_limit'] = 1
        features['esig'] = true
        features['background_checks'] = true
        features['advanced_reporting'] = true
        features['hello_messenger'] = true
      } else if (planId === "v5sprout") {
        features['position_limit'] = 7
        features['custom_domain'] = true
        features['reference_checking'] = true
      } else if (planId === "v5starter") {
        features['position_limit'] = 3
        features['custom_domain'] = true
      } else if (planId === "v5uno") {
        features['position_limit'] = 1
        features['bulk_candidate_messaging'] = false
        features['scheduling_links'] = false
      } else if (planId === "freebie") {
        features['position_limit'] = 40
        features['video_response'] = true
        features['video_response_length'] = true
        features['video_interview'] = true
        features['document_signing'] = true
        features['custom_domain'] = true
        features['reference_checking'] = true
        features['referral_portal'] = true
        features['bulk_candidate_messaging'] = false
        features['candidate_pool_messaging'] = true
        features['hello_messenger'] = false
        features['multi_interview'] = true
      }
    }

    let setPlanFeatureDefaults = function (planId) {

      // Enabled defaults
      features['video_response'] = true
      features['video_interview'] = true
      features['reference_checking'] = true
      features['referral_portal'] = false
      features['recruiter_portal'] = true
      features['bulk_candidate_messaging'] = true
      features['candidate_pool_messaging'] = false
      features['hello_messenger'] = false
      features['multi_interview'] = false
      features['esig_limit'] = 0
      features['esig'] = false
      features['developer_api'] = true
      features['hris'] = true
      features['tasks'] = true
      features['bulk_actions'] = true

      if (!planId) {
        console.log('setPlanFeatureDefaults: MISSING PLANID', planId)
        return features
      }

      if (planId.indexOf('success') > -1) {
        features['position_limit'] = 100
        features['company_cloning'] = true
        features['cross_company_candidate_copy'] = true
        features['document_signing'] = true
        features['custom_domain'] = true
        features['referral_portal'] = true
        features['candidate_pool_messaging'] = true
        features['esig_limit'] = 1
        features['esig'] = true
        features['hello_messenger'] = true
        features['background_checks'] = true
        features['video_interview_archiving'] = true
        features['multi_interview'] = true
      } else if (planId.indexOf('growth') > -1) {
        features['position_limit'] = 15
        features['custom_domain'] = true
        features['referral_portal'] = true
        features['candidate_pool_messaging'] = true
        features['esig_limit'] = 1
        features['esig'] = true
        features['hello_messenger'] = false
      } else if (planId.indexOf('sprout') > -1) {
        features['position_limit'] = 7
        features['custom_domain'] = true
      } else if (planId.indexOf('starter') > -1) {
        features['position_limit'] = 3
        features['custom_domain'] = true
      } else if (planId.indexOf('uno') > -1) {
        features['position_limit'] = 1
        features['bulk_candidate_messaging'] = false
        features['scheduling_links'] = false
      } else if (planId === "freebie") {
        features['position_limit'] = 40
        features['bulk_candidate_messaging'] = false
        features['referral_portal'] = true
        features['candidate_pool_messaging'] = true
        features['hello_messenger'] = false
        features['multi_interview'] = true
      }
      return features
    }

    let setExpiredState = function (planId, trial_expiry_date) {
      if (planId !== "freebie") {
        features['trial_expired'] = false
        return
      }

      let now = new Date()
      let trialEnds = new Date(trial_expiry_date)
      let trialDaysLeft = Math.round((trialEnds.getTime() - now.getTime()) / (1000 * 60 * 60 * 24))
      if (!trialDaysLeft || trialDaysLeft < 1) {
        features['trial_expired'] = true
        setFeaturesDisabled()
      }
    }

    let setOverrides = function (overrides) {
      for (let key in overrides) {
        features[key] = overrides[key]
      }
      if (features.hasOwnProperty("_id")) {
        delete features._id
      }
    }

    setFeaturesDisabled()

    if (company.pricing === "v7") setV7PlanFeatureDefaults(company.plan.id)
    else if (company.pricing === "v6") setV6PlanFeatureDefaults(company.plan.id)
    else if (company.pricing === "v5") setV5PlanFeatureDefaults(company.plan.id)
    else setPlanFeatureDefaults(company.plan.id)

    setExpiredState(company.plan.id, company.trial_expiry_date)
    setOverrides(overrides)

    return features
  },

  getSimpleUser: function (user) {
    if (!user) {
      return
    }
    let simple = {
      _id: user._id,
      name: user.name,
      type: user.type,
      profile_photo_url: user.profile_photo_url,
      initial: user.initial,
      hex_color: user.hex_color,
      tz_offset: user.tz_offset,
      google_mail: user.google_mail,
      outlook_mail: user.outlook_mail
    }
    return simple
  },

  getSimplePosition: function (position) {
    if (!position) {
      return
    }
    let simple = {
      '_id': position._id,
      'friendly_id': position.friendly_id,
      'name': position.name,
      'approved': position.approved,
      'org_type': position.org_type,
      'location': position.location,
      'department': position.department,
      'requisition_id': position.requisition_id,
      'type': position.type,
      'category': position.category,
      'users': position.users,
      'all_users': position.all_users,
      'admins': position.admins,
      'all_admins': position.all_admins,
      'company_id': position.company_id,
      'company': this.getSimpleCompany(position.company)
    }
    return simple
  },

  getActivityCompany: function (company) {
    if (!company) {
      return;
    }
    var simple = {
      '_id': company._id,
      'name': company.name,
      'creation_date': company.creation_date,
      'url': company.url,
      'friendly_id': company.friendly_id,
      'plan': company.plan,
      'creator_id': company.creator_id,
      'creator_email': company.creator_email,
    };
    return simple;
  },

  getActivityPosition: function (position) {
    if (!position) {
      return;
    }
    var simple = {
      '_id': position._id,
      'friendly_id': position.friendly_id,
      'name': position.name,
      'approved': position.approved,
      'org_type': position.org_type,
      'location': position.location,
      'department': position.department,
      'requisition_id': position.requisition_id,
      'type': position.type,
      'category': position.category,
      'company_id': position.company_id
    };
    return simple;
  },

  getSimpleCompany: function (company) {
    if (!company) {
      return
    }
    let simple = {
      '_id': company._id,
      'name': company.name,
      'logo_url': company.logo_url,
      'url': company.url,
      'friendly_id': company.friendly_id,
      'description': company.description,
      'initial': company.initial,
      'cpid': company.cpid,
      'gclid': company.gclid,
      'market_type': company.market_type,
      'portal_fqdn': company.portal_fqdn,
      'plan': company.plan,
      'googleanalytics_id': company.googleanalytics_id,
      'creator_email': company.creator_email,
      'features': company.features,
      'settings': company.settings
    }
    return simple
  },

  getSimplePublicCompany: function (company) {
    if (!company) {
      return
    }
    let simple = {
      '_id': company._id,
      'name': company.name,
      'logo_url': company.logo_url,
      'friendly_id': company.friendly_id,
      'description': company.description,
      'cpid': company.cpid,
      'portal_fqdn': company.portal_fqdn,
      'plan': company.plan,
      'googleanalytics_id': company.googleanalytics_id,
      'features': company.features,
      'settings': company.settings,
      'youtube_embed_url': company.youtube_embed_url,
      'vimeo_embed_url': company.vimeo_embed_url,
      'youtube_video_id': company.youtube_video_id, //deprecated
      'vimeo_video_id': company.vimeo_video_id, //deprecated
    }
    return simple
  },

  rgbToHex: function (rgb_string) {
    let argb = rgb_string.replace("rgb(", "").replace(")", "").split(',')
    let rgb = argb[2] | (argb[1] << 8) | (argb[0] << 16)
    return '#' + rgb.toString(16)
  },

  isEmail: function (email) {
    let re = /^(([^<>()[\]\\.,:\s@\"]+(\.[^<>()[\]\\.,:\s@\"]+)*)|(\".+\"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/
    return re.test(email)
  },

  isPhoneNumber: function (phoneNumber, location) {
    try {
      let countryId = "US"
      if (location && location.country && location.country.id) countryId = location.country.id
      let number = phoneUtil.parseAndKeepRawInput(phoneNumber, countryId)
      return phoneUtil.isValidNumber(number)
    } catch (e) {
      console.log('isValidPhoneNumber (' + phoneNumber + '): ' + e)
      return false
    }
  },

  normalizePhoneNumber: function (phoneNumber, location) {
    try {
      console.log("normalizePhoneNumber: " + JSON.stringify(location))
      let countryId = "US"
      if (location && location.country && location.country.id) countryId = location.country.id
      let number = phoneUtil.parseAndKeepRawInput(phoneNumber, countryId)
      if (phoneUtil.isValidNumber(number, location) === false) {
        console.log('normalizePhoneNumber: Invalid Phone Number: ' + phoneNumber + ", Country ID:  " + countryId)
        return
      }
      let normalizedPhoneNumber = phoneUtil.format(number, PNF.E164)
      console.log("normalizePhoneNumber Original: " + phoneNumber + ", Country ID:  " + countryId + ", Normalized: " + normalizedPhoneNumber)
      return normalizedPhoneNumber
    } catch (e) {
      console.log('normalizePhoneNumber (' + phoneNumber + '): ' + e)
      return false
    }
  },

  getRegionCodeForNumber: function (phoneNumber, location) {
    let countryId = "US"
    if (location && location.country && location.country.id) countryId = location.country.id
    let regionCode = phoneUtil.getRegionCodeForNumber(phoneUtil.parseAndKeepRawInput(phoneNumber, countryId))
    console.log('[TWILIO] getRegionCodeForNumber', phoneNumber, regionCode)
    return regionCode
  },

  cache: {
    chooseCache: function (dependency_id) {
      if (dependency_id === 'f7e353255007' || dependency_id === 'e16af8b6eb68') return cache_us.nocache
      return cache_us
      /// overriding this for performance ... the data at rest is in the right region

      /*if(dependency_id && dependency_id.length > 12 && dependency_id.slice(-2) == config.region_codes.eu){
        console.log("[REDIS] - using EU cache.")
        return cache_eu
      }
      return cache_us
      */
    },
    deleteGlobalKey: function (key, callback) {
      cache_us.delete(key, function () {
        console.log("[REDIS] - US cache key being deleted:", key)
      })
      /*
      cache_eu.delete(key, function(){
        console.log("[REDIS] - EU cache key being deleted:",key)
      })*/
      callback()
    }
  },

  checkFeatureAccess: function (company, feature) {
    // only return no access if the feature configuration exists and is not set to true

    if (!company) {
      return true
    }
    if (!company.hasOwnProperty("features")) {
      return true
    }
    if (!company.features.hasOwnProperty(feature)) {
      return true
    }
    if (company.features[feature] === true) {
      return true
    }

    return false
  },

  normalizePlanId: function (planId, pricing) {
    if (planId.indexOf(pricing) == 0) {
      planId = planId.substring(3)
    }
    if (planId.indexOf("_") > -1) {
      planId = planId.substring(0, planId.indexOf("_"))
    }
    return planId
  },

  getSecureAttachmentUrl: function (file_url, companyId, positionId, candidateId, type, typeId, fileName) {
    let ret = file_url
    let secureGuid
    let fileGuid

    if (config.secureDocs.indexOf(companyId) > -1) {
      if (file_url.indexOf("attachments-cdn") > -1) {
        fileGuid = file_url.split("/")[3]
        secureGuid = base64url.encode(companyId + "/" + positionId + "/" + candidateId + "/" + type + "/" + typeId + "/" + fileGuid + "/" + fileName)
        ret = config.breezy_base_url + "t/" + secureGuid
      }
    }
    return ret
  },

  replaceTemplateVariables: function (body, data) {
    if (data.company) body = replaceCompanyName(body, data.company)
    if (data.position) body = replacePositionTitle(body, data.position)

    if (data.sender) body = replaceCompanyUser(body, data.sender)
    if (data.sender) body = replaceCompanyUserFirstName(body, data.sender)

    if (data.position && data.company) {
      body = replacePositionLink(body, data.position, data.company)
    }

    return body
  },

  getCardActingUser: function (user) {
    let simple = {
      '_id': user._id,
      'name': user.name,
      'profile_photo_url': user.profile_photo_url,
      'initial': user.initial,
      'hex_color': user.hex_color,
      'type': user.type
    }
    return simple
  },

  firstUpper: function (word) {
    return word.charAt(0).toUpperCase() + word.slice(1)
  },
}

function replacePositionTitle(body, position) {
  return body.replace(/\[\[position_title\]\]/g, position.name)
}

function replaceCompanyName(body, company) {
  return body.replace(/\[\[company_name\]\]/g, company.name)
}

function replaceCompanyUserFirstName(body, sender) {
  if (sender._id === "nimblebot") {
    sender.name = "Hiring Team"
  }
  return body.replace(/\[\[company_user_first_name\]\]/g, sender.name.split(' ')[0])
}

function replaceCompanyUser(body, sender) {
  if (sender._id === "nimblebot") {
    sender.name = "Hiring Team"
  }
  return body.replace(/\[\[company_user\]\]/g, sender.name)
}

function replacePositionLink(body, position, company) {
  return body.replace(/\[\[position_link\]\]/g, "https://" + company.friendly_id + '.breezy.hr/p/' + position.friendly_id)
}
