'use strict'

const requestPromise = require('request-promise-native')
const {APIError} = require('../system/error')
const trace = require('../middleware/express-request-trace')
const REQUEST_METHOD_GET = 'GET'
const REQUEST_METHOD_POST = 'POST'
const REQUEST_METHOD_PUT = 'PUT'
const REQUEST_METHOD_DELETE = 'DELETE'
const SECURE = 'https://'
const INSECURE = 'http://'
const API = '/api/'
const LOG_NS = '[BREEZY_REQUEST]'

class BreezyRequest {

  constructor(config) {

    if (config) {
      this._hostName = config.HOSTNAME
      this._port = config.PORT
      this._version = config.VERSION
      this._disabled = false
    } else {
      this._hostName = 'no host'
      this._port = 'no port'
      this._version = 'no version'
      this._disabled = true
    }
  }

  /**
   * Creates a header using a trace id if its available
   * @returns {Promise<object>}
   */
  async _buildTraceHeaders() {

    let headers = {}

    let traceId = await trace.id()

    if (traceId) {
      headers[trace.TRACE_HEADER_NAME] = traceId
    } else {
      headers[trace.TRACE_HEADER_NAME] = trace.getTraceId()
    }
    return headers
  }

  /**
   * Constructs a uri
   * @param resource
   * @param secure
   * @returns {string}
   * @private
   */
  _buildUri(resource, secure = false) {

    let port = this._port ? ':' + this._port : ''
    if (secure) {
      return SECURE + this._hostName + port + API + this._version + '/' + resource
    } else {
      return INSECURE + this._hostName + port + API + this._version + '/' + resource
    }
  }

  /**
   * simple handling of an incoming response
   * @param response
   * @param options
   * @returns {Promise<*>}
   * @private
   */
  async _handleResponse(response, options) {

    let start = Date.now()
    let result;
    delete options.body
    try {
      result = await response;
    } catch (e) {
      console.info(JSON.stringify(options) + ": " + (Date.now() - start) + "ms")
      throw new APIError(JSON.stringify(e.error), e.statusCode)
    }
    console.info(JSON.stringify(options) + ": " + (Date.now() - start) + "ms")
    if (result.statusCode !== 200 && result.statusCode !== 204) {
      throw new APIError(result.body, result.statusCode)
    }
    return result.body
  }

  /**
   *
   * @param options
   * @returns {Promise<void>}
   */
  async _base(options) {

    if (this._disabled) {
      console.warn(LOG_NS, 'Missing configuration')
      return
    }

    let headers = await this._buildTraceHeaders()

    if (!options.headers) {
      options.headers = {}
    }

    Object.assign(options.headers, headers)

    let baseOptions = {
      json: true,
      resolveWithFullResponse: true
    }

    Object.assign(baseOptions, options)

    return this._handleResponse(requestPromise(baseOptions), options)
  }

  /**
   * Performs a get request using the supplied resource
   * @param resource
   * @param options
   * @returns {Promise<void>}
   */
  async get(resource, options = {}) {

    options.method = REQUEST_METHOD_GET
    options.uri = this._buildUri(resource)
    return this._base(options)
  }

  /**
   * Performs a post request using the supplied resource
   * @param resource
   * @param options
   * @returns {Promise<void>}
   */
  async post(resource, options = {}) {

    options.method = REQUEST_METHOD_POST
    options.uri = this._buildUri(resource)
    return this._base(options)
  }

  /**
   * Performs a put request using the supplied resource
   * @param resource
   * @param options
   * @returns {Promise<void>}
   */
  async put(resource, options = {}) {

    options.method = REQUEST_METHOD_PUT
    options.uri = this._buildUri(resource)
    return this._base(options)
  }

  /**
   * Performs a delete request using the supplied resource
   * @param resource
   * @param options
   * @returns {Promise<void>}
   */
  async del(resource, options = {}) {

    options.method = REQUEST_METHOD_DELETE
    options.uri = this._buildUri(resource)
    return this._base(options)
  }
}

module.exports = BreezyRequest
