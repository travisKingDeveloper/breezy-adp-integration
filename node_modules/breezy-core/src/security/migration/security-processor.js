'use strict'

const models = require('./static-models')
const securityConfig = require('../../../data/security-config')
const security = require('../../../src/security/access-manager')
const grantHelpers = require('../../lib/security/grant-helpers')
const LOG_NS = '[SECURITY-PROCESSOR]'

module.exports = {
  postProcessDetails,
  postProcessPositionList,
  processPositionTeam,
  attachModelToPosition
}

/**
 * postProcessDetails - takes init details and adds pre-eval logic for inbox (and reports?!)
 * @param details
 * @returns {*}
 */
function postProcessDetails(details) {

  for (let key in details) {

    let companyAdmin = false
    let hiringManager = false
    let member = false
    let companyModel = {}

    let memberPositions = []
    let managerPositions = []

    //admin vs member check
    if (details[key].user_settings && details[key].user_settings.grants) {
      console.log(LOG_NS, 'Grants detected, using existing data')
      return details
    } else if (details[key].company.is_admin) {
      companyAdmin = true
      if (details[key].company.settings.ats.candidate_management_company_admin) {
        companyModel = JSON.parse(JSON.stringify(models.admin))
      } else {
        companyModel = JSON.parse(JSON.stringify(models.sys_admin))
      }
    } else {
      companyModel = JSON.parse(JSON.stringify(models.member))
    }
    console.log(LOG_NS, 'No grants detected, using static models')

    for (let position in details[key].positions) {

      let securePosition = _updatePosition(details[key].positions[position], companyModel)

      if (securePosition.is_admin) {
        managerPositions.push(securePosition._id)
        hiringManager = true
      }
      if (securePosition.is_member) {
        memberPositions.push(securePosition._id)
        member = true
      }

      details[key].positions[position] = securePosition
    }

    let model
    if (hiringManager && member) {
      model = companyModel.all
    } else if (hiringManager) {
      model = companyModel.manager
    } else if (member) {
      model = companyModel.member
    } else {
      model = companyModel.none
    }

    if (memberPositions.length > 0) {
      model.positionRoles.position_member = memberPositions
    }

    if (managerPositions.length > 0) {
      model.positionRoles.manager = managerPositions
    }

    let manager = new security.AccessManager(model)
    details[key].user_settings.grants = grantHelpers.buildCompanyGrants(manager)

    details[key].user_settings.grants.roles = _attachRoleDetails(details[key].company)
  }

  return details
}

function _updatePosition(position, companyModel, attachModel = false) {

  let hiringManager = position.is_admin
  let member = position.is_member
  let scope
  let model

  if (hiringManager && member) {
    model = companyModel.all
    scope = position._id
  } else if (hiringManager) {
    model = companyModel.manager
    scope = position._id
  } else if (member) {
    model = companyModel.member
    scope = position._id
  } else {
    model = companyModel.none
  }

  model.companyId = position.company._id
  for (let role in model.positionRoles) {
    model.positionRoles[role].push(scope)
  }

  let manager = new security.AccessManager(model)

  if (attachModel) {
    position.grants = {}
    position.grants.model = manager.export(scope)
  } else {
    if (!position.grants) {
      position.grants = grantHelpers.buildPositionGrants(manager, scope)
    }
  }

  return position
}

function processPositionTeam(team) {
  for (let member of team) {
    member.is_assignable = member.is_admin
  }
}

function attachModelToPosition(position) {

  let companyModel = {}

  if (position && position.company && position.company.is_admin) {
    companyModel = JSON.parse(JSON.stringify(models.admin))
    if (position.company.settings.ats.candidate_management_company_admin) {
      companyModel = JSON.parse(JSON.stringify(models.admin))
    } else {
      companyModel = JSON.parse(JSON.stringify(models.sys_admin))
    }
  } else {
    companyModel = JSON.parse(JSON.stringify(models.admin))
  }

  position = _updatePosition(position, companyModel, true)

  return position
}

function _attachRoleDetails(company) {
  let defaultRoles = JSON.parse(JSON.stringify(securityConfig.defaultRoles))
  let roles = []
  for (let role of defaultRoles) {
    role.company_id = company._id
    delete role.permissions
    if ((role._id === 'sys_admin' && company.settings.ats.candidate_management_company_admin) ||
      (role._id === 'admin' && !company.settings.ats.candidate_management_company_admin)) {
      //exclude the non-configured role
    } else {
      roles.push(role)
    }
  }
  return roles
}

/**
 * postProcessPositionList - takes the global list of positions and prechecks permmissions and records the functionality
 * @param positions
 * @returns {*}
 */
function postProcessPositionList(positions) {
  return positions
}