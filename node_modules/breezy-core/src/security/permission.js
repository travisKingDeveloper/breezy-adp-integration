'use strict'

class Permission {

  /**
   * @typedef {object} PermissionAccess
   * @property {boolean} create
   * @property {boolean} read
   * @property {boolean} update
   * @property {boolean} remove
   */

  /**
   * @typedef {object} PermissionConfig
   * @property {string} id
   * @property {string} name
   * @property {boolean} create
   * @property {boolean} read
   * @property {boolean} update
   * @property {boolean} remove
   */

  /**
   *
   * @param {object} config
   * @param {PermissionAccess} permissionsValues
   * @param {number} [initToValue]
   */
  constructor(config, permissionsValues = {}, initToValue = 0) {

    this._id = config._id
    if (initToValue) {
      this._value = initToValue
    } else {
      let create = permissionsValues.create | 0
      let read = (permissionsValues.read | 0) << 1
      let update = (permissionsValues.update | 0) << 2
      let remove = (permissionsValues.remove | 0) << 3
      this._value = create | read | update | remove
    }
  }

  /**
   * validateAgainst - validates against a permission requirement
   * @param {PermissionConfig} permission
   */
  validateAgainst(permission) {
    //console.debug(this._id, permission.id(), (permission.value() & this._value), permission.value())
    return (this._id === permission.id()) && (permission.value() & this._value) === permission.value()
  }

  /**
   * id - permission id
   * @returns {string}
   */
  id() {
    return this._id
  }

  /**
   * value - permission value
   * @returns {number|*}
   */
  value() {
    return this._value
  }

  and(permission) {
    this._value = this._value | permission.value()
  }
}

module.exports = {
  Permission
}